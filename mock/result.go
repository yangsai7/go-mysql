// Autogenerated by the tool "go-mock-code-gen" built from
// gitlab.nolibox.com/skyteam/go-mock-code-gen
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

// mock 可以 mock 掉 Result interface 的所有方法，方便编写单元测试。
package mock

import (
	"fmt"
	"sync"

	mysql "github.com/yangsai7/go-mysql"
)

type mockDataResult map[string][]interface{}
type mockDefaultDataResult map[string]interface{}

// MockDataAdderResult 用于向 MockResult 添加指定接口的测试数据。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockDataAdderResult struct {
	m *MockResult
}

// MockFuncAdderResult 用于向 MockResult 添加指定接口的测试方法，当接口调用时这里设置的方法就会调用。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockFuncAdderResult struct {
	m *MockResult
}

// MockDefaultDataResult 用于向 MockResult 添加指定接口的默认测试数据。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试数据就会被返回给调用者。
// MockDefaultDataResult 和 MockDefaultFuncFuncResult 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultDataResult struct {
	m *MockResult
}

// MockDefaultFuncFuncResult 用于向 MockResult 添加指定接口的默认测试方法实现。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试方法就会被调用。
// MockDefaultDataResult 和 MockDefaultFuncFuncResult 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultFuncResult struct {
	m *MockResult
}

// MockResult 是一个 mock 容器，可以将 Result 接口的所有方法设置 mock 数据。
type MockResult struct {
	mu sync.Mutex

	data            mockDataResult
	defData         mockDefaultDataResult
	impl            mysql.Result
	optionalMethods map[string]bool

	dataAdder   *MockDataAdderResult
	funcAdder   *MockFuncAdderResult
	defaultData *MockDefaultDataResult
	defaultFunc *MockDefaultFuncResult
}

type mockImplResult struct {
	mysql.Result // 强行的实现 Result 接口，用于做向后兼容。

	m *MockResult
}

// 确保 mockImplResult 始终实现了 mysql.Result 接口。
var _ mysql.Result = new(mockImplResult)

// NewResult 创建一个 Result 的 mock 容器。
// impl 是一个默认的接口实现，假如接口没有被 mock 或者 mock 数据已经消费完，impl 的方法会被调用。
//
// impl 可以为 nil，但是这意味着没有默认实现，一旦调用一个没有 mock 数据的接口，且这个接口没有被设置为可选，那么会触发 panic。
func NewResult(impl mysql.Result) *MockResult {
	optionalMethods := map[string]bool{}
	optionalMethods["Close"] = true
	optionalMethods["Init"] = true

	m := &MockResult{
		data:            mockDataResult{},
		defData:         mockDefaultDataResult{},
		impl:            impl,
		optionalMethods: optionalMethods,
	}
	m.dataAdder = &MockDataAdderResult{m}
	m.funcAdder = &MockFuncAdderResult{m}
	m.defaultData = &MockDefaultDataResult{m}
	m.defaultFunc = &MockDefaultFuncResult{m}
	return m
}

// Mock 返回一个实现了所有 Result 方法的实例。
func (m *MockResult) Mock() mysql.Result {
	return &mockImplResult{
		m: m,
	}
}

// DataAdder 返回一个添加接口测试数据的入口。
func (m *MockResult) DataAdder() *MockDataAdderResult {
	return m.dataAdder
}

// FuncAdder 返回一个添加接口回调的入口。
func (m *MockResult) FuncAdder() *MockFuncAdderResult {
	return m.funcAdder
}

// DefaultData 返回一个设置接口默认测试数据的入口。
func (m *MockResult) DefaultData() *MockDefaultDataResult {
	return m.defaultData
}

// DefaultFunc 返回一个设置接口默认回调的入口。
func (m *MockResult) DefaultFunc() *MockDefaultFuncResult {
	return m.defaultFunc
}

// LastInsertId 增加一个 LastInsertId 方法的返回值的 mock 数据。
// 如果 Result#LastInsertId 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderResult) LastInsertId(out0 int64, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "LastInsertId"
	__adder.m.data[__key] = append(__adder.m.data[__key], func() (int64, error) {
		return out0, err
	})
}

// LastInsertId 增加一个 mock 数据的回调函数，在执行 Result#LastInsertId 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Result#LastInsertId 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderResult) LastInsertId(f func() (out0 int64, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "LastInsertId"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// LastInsertId 设置 Result#LastInsertId 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().LastInsertId(...) 方法设置的默认回调。
func (__def *MockDefaultDataResult) LastInsertId(out0 int64, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "LastInsertId"
	__def.m.defData[__key] = func() (int64, error) {
		return out0, err
	}
}

// LastInsertId 设置 Result#LastInsertId 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().LastInsertId(...) 方法设置的默认数据。
func (def *MockDefaultFuncResult) LastInsertId(f func() (out0 int64, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "LastInsertId"
	def.m.defData[key] = f
}

func (__impl *mockImplResult) LastInsertId() (out0 int64, err error) {
	__impl.m.mu.Lock()

	__key := "LastInsertId"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func() (int64, error))
			return __f()
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.LastInsertId()
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func() (int64, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f()
}

// RowsAffected 增加一个 RowsAffected 方法的返回值的 mock 数据。
// 如果 Result#RowsAffected 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderResult) RowsAffected(out0 int64, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "RowsAffected"
	__adder.m.data[__key] = append(__adder.m.data[__key], func() (int64, error) {
		return out0, err
	})
}

// RowsAffected 增加一个 mock 数据的回调函数，在执行 Result#RowsAffected 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Result#RowsAffected 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderResult) RowsAffected(f func() (out0 int64, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "RowsAffected"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// RowsAffected 设置 Result#RowsAffected 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().RowsAffected(...) 方法设置的默认回调。
func (__def *MockDefaultDataResult) RowsAffected(out0 int64, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "RowsAffected"
	__def.m.defData[__key] = func() (int64, error) {
		return out0, err
	}
}

// RowsAffected 设置 Result#RowsAffected 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().RowsAffected(...) 方法设置的默认数据。
func (def *MockDefaultFuncResult) RowsAffected(f func() (out0 int64, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "RowsAffected"
	def.m.defData[key] = f
}

func (__impl *mockImplResult) RowsAffected() (out0 int64, err error) {
	__impl.m.mu.Lock()

	__key := "RowsAffected"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func() (int64, error))
			return __f()
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.RowsAffected()
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func() (int64, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f()
}
