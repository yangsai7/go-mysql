// Autogenerated by the tool "go-mock-code-gen" built from
// gitlab.nolibox.com/skyteam/go-mock-code-gen
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

// mock 可以 mock 掉 Row interface 的所有方法，方便编写单元测试。
package mock

import (
	"fmt"
	"sync"

	mysql "github.com/yangsai7/go-mysql"
)

type mockDataRow map[string][]interface{}
type mockDefaultDataRow map[string]interface{}

// MockDataAdderRow 用于向 MockRow 添加指定接口的测试数据。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockDataAdderRow struct {
	m *MockRow
}

// MockFuncAdderRow 用于向 MockRow 添加指定接口的测试方法，当接口调用时这里设置的方法就会调用。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockFuncAdderRow struct {
	m *MockRow
}

// MockDefaultDataRow 用于向 MockRow 添加指定接口的默认测试数据。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试数据就会被返回给调用者。
// MockDefaultDataRow 和 MockDefaultFuncFuncRow 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultDataRow struct {
	m *MockRow
}

// MockDefaultFuncFuncRow 用于向 MockRow 添加指定接口的默认测试方法实现。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试方法就会被调用。
// MockDefaultDataRow 和 MockDefaultFuncFuncRow 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultFuncRow struct {
	m *MockRow
}

// MockRow 是一个 mock 容器，可以将 Row 接口的所有方法设置 mock 数据。
type MockRow struct {
	mu sync.Mutex

	data            mockDataRow
	defData         mockDefaultDataRow
	impl            mysql.Row
	optionalMethods map[string]bool

	dataAdder   *MockDataAdderRow
	funcAdder   *MockFuncAdderRow
	defaultData *MockDefaultDataRow
	defaultFunc *MockDefaultFuncRow
}

type mockImplRow struct {
	mysql.Row // 强行的实现 Row 接口，用于做向后兼容。

	m *MockRow
}

// 确保 mockImplRow 始终实现了 mysql.Row 接口。
var _ mysql.Row = new(mockImplRow)

// NewRow 创建一个 Row 的 mock 容器。
// impl 是一个默认的接口实现，假如接口没有被 mock 或者 mock 数据已经消费完，impl 的方法会被调用。
//
// impl 可以为 nil，但是这意味着没有默认实现，一旦调用一个没有 mock 数据的接口，且这个接口没有被设置为可选，那么会触发 panic。
func NewRow(impl mysql.Row) *MockRow {
	optionalMethods := map[string]bool{}
	optionalMethods["Close"] = true
	optionalMethods["Init"] = true

	m := &MockRow{
		data:            mockDataRow{},
		defData:         mockDefaultDataRow{},
		impl:            impl,
		optionalMethods: optionalMethods,
	}
	m.dataAdder = &MockDataAdderRow{m}
	m.funcAdder = &MockFuncAdderRow{m}
	m.defaultData = &MockDefaultDataRow{m}
	m.defaultFunc = &MockDefaultFuncRow{m}
	return m
}

// Mock 返回一个实现了所有 Row 方法的实例。
func (m *MockRow) Mock() mysql.Row {
	return &mockImplRow{
		m: m,
	}
}

// DataAdder 返回一个添加接口测试数据的入口。
func (m *MockRow) DataAdder() *MockDataAdderRow {
	return m.dataAdder
}

// FuncAdder 返回一个添加接口回调的入口。
func (m *MockRow) FuncAdder() *MockFuncAdderRow {
	return m.funcAdder
}

// DefaultData 返回一个设置接口默认测试数据的入口。
func (m *MockRow) DefaultData() *MockDefaultDataRow {
	return m.defaultData
}

// DefaultFunc 返回一个设置接口默认回调的入口。
func (m *MockRow) DefaultFunc() *MockDefaultFuncRow {
	return m.defaultFunc
}

// Scan 增加一个 Scan 方法的返回值的 mock 数据。
// 如果 Row#Scan 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderRow) Scan(err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Scan"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(dest ...interface{}) error {
		return err
	})
}

// Scan 增加一个 mock 数据的回调函数，在执行 Row#Scan 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Row#Scan 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderRow) Scan(f func(dest ...interface{}) (err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Scan"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Scan 设置 Row#Scan 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Scan(...) 方法设置的默认回调。
func (__def *MockDefaultDataRow) Scan(err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Scan"
	__def.m.defData[__key] = func(dest ...interface{}) error {
		return err
	}
}

// Scan 设置 Row#Scan 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Scan(...) 方法设置的默认数据。
func (def *MockDefaultFuncRow) Scan(f func(dest ...interface{}) (err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Scan"
	def.m.defData[key] = f
}

func (__impl *mockImplRow) Scan(dest ...interface{}) (err error) {
	__impl.m.mu.Lock()

	__key := "Scan"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(dest ...interface{}) error)
			return __f(dest...)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Scan(dest...)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(dest ...interface{}) error)
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(dest...)
}
