// Autogenerated by the tool "go-mock-code-gen" built from
// gitlab.nolibox.com/skyteam/go-mock-code-gen
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

// mock 可以 mock 掉 Mysql interface 的所有方法，方便编写单元测试。
package mock

import (
	"database/sql"
	"fmt"
	"sync"

	mysql "github.com/yangsai7/go-mysql"
)

type mockDataMysql map[string][]interface{}
type mockDefaultDataMysql map[string]interface{}

// MockDataAdderMysql 用于向 MockMysql 添加指定接口的测试数据。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockDataAdderMysql struct {
	m *MockMysql
}

// MockFuncAdderMysql 用于向 MockMysql 添加指定接口的测试方法，当接口调用时这里设置的方法就会调用。
// 这里添加的测试数据是一次性的，只要设置了的 mock 数据的接口被调用，数据就会按照 FIFO 顺序消费掉。
type MockFuncAdderMysql struct {
	m *MockMysql
}

// MockDefaultDataMysql 用于向 MockMysql 添加指定接口的默认测试数据。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试数据就会被返回给调用者。
// MockDefaultDataMysql 和 MockDefaultFuncFuncMysql 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultDataMysql struct {
	m *MockMysql
}

// MockDefaultFuncFuncMysql 用于向 MockMysql 添加指定接口的默认测试方法实现。
// 如果该接口没有设置测试数据或者测试数据已经消费完，这个默认的测试方法就会被调用。
// MockDefaultDataMysql 和 MockDefaultFuncFuncMysql 会互相覆盖。
// 如果设置了同一个接口的默认数据，会以最后调用为准。
type MockDefaultFuncMysql struct {
	m *MockMysql
}

// MockMysql 是一个 mock 容器，可以将 Mysql 接口的所有方法设置 mock 数据。
type MockMysql struct {
	mu sync.Mutex

	data            mockDataMysql
	defData         mockDefaultDataMysql
	impl            mysql.Mysql
	optionalMethods map[string]bool

	dataAdder   *MockDataAdderMysql
	funcAdder   *MockFuncAdderMysql
	defaultData *MockDefaultDataMysql
	defaultFunc *MockDefaultFuncMysql
}

type mockImplMysql struct {
	mysql.Mysql // 强行的实现 Mysql 接口，用于做向后兼容。

	m *MockMysql
}

// 确保 mockImplMysql 始终实现了 mysql.Mysql 接口。
var _ mysql.Mysql = new(mockImplMysql)

// NewMysql 创建一个 Mysql 的 mock 容器。
// impl 是一个默认的接口实现，假如接口没有被 mock 或者 mock 数据已经消费完，impl 的方法会被调用。
//
// impl 可以为 nil，但是这意味着没有默认实现，一旦调用一个没有 mock 数据的接口，且这个接口没有被设置为可选，那么会触发 panic。
func NewMysql(impl mysql.Mysql) *MockMysql {
	optionalMethods := map[string]bool{}
	optionalMethods["Close"] = true
	optionalMethods["Init"] = true

	m := &MockMysql{
		data:            mockDataMysql{},
		defData:         mockDefaultDataMysql{},
		impl:            impl,
		optionalMethods: optionalMethods,
	}
	m.dataAdder = &MockDataAdderMysql{m}
	m.funcAdder = &MockFuncAdderMysql{m}
	m.defaultData = &MockDefaultDataMysql{m}
	m.defaultFunc = &MockDefaultFuncMysql{m}
	return m
}

// Mock 返回一个实现了所有 Mysql 方法的实例。
func (m *MockMysql) Mock() mysql.Mysql {
	return &mockImplMysql{
		m: m,
	}
}

// DataAdder 返回一个添加接口测试数据的入口。
func (m *MockMysql) DataAdder() *MockDataAdderMysql {
	return m.dataAdder
}

// FuncAdder 返回一个添加接口回调的入口。
func (m *MockMysql) FuncAdder() *MockFuncAdderMysql {
	return m.funcAdder
}

// DefaultData 返回一个设置接口默认测试数据的入口。
func (m *MockMysql) DefaultData() *MockDefaultDataMysql {
	return m.defaultData
}

// DefaultFunc 返回一个设置接口默认回调的入口。
func (m *MockMysql) DefaultFunc() *MockDefaultFuncMysql {
	return m.defaultFunc
}

// Begin 增加一个 Begin 方法的返回值的 mock 数据。
// 如果 Mysql#Begin 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Begin(out0 mysql.Tx, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Begin"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(opts *sql.TxOptions) (mysql.Tx, error) {
		return out0, err
	})
}

// Begin 增加一个 mock 数据的回调函数，在执行 Mysql#Begin 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Begin 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Begin(f func(opts *sql.TxOptions) (out0 mysql.Tx, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Begin"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Begin 设置 Mysql#Begin 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Begin(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Begin(out0 mysql.Tx, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Begin"
	__def.m.defData[__key] = func(opts *sql.TxOptions) (mysql.Tx, error) {
		return out0, err
	}
}

// Begin 设置 Mysql#Begin 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Begin(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Begin(f func(opts *sql.TxOptions) (out0 mysql.Tx, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Begin"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Begin(opts *sql.TxOptions) (out0 mysql.Tx, err error) {
	__impl.m.mu.Lock()

	__key := "Begin"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(opts *sql.TxOptions) (mysql.Tx, error))
			return __f(opts)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Begin(opts)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(opts *sql.TxOptions) (mysql.Tx, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(opts)
}

// Close 增加一个 Close 方法的返回值的 mock 数据。
// 如果 Mysql#Close 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Close(err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Close"
	__adder.m.data[__key] = append(__adder.m.data[__key], func() error {
		return err
	})
}

// Close 增加一个 mock 数据的回调函数，在执行 Mysql#Close 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Close 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Close(f func() (err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Close"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Close 设置 Mysql#Close 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Close(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Close(err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Close"
	__def.m.defData[__key] = func() error {
		return err
	}
}

// Close 设置 Mysql#Close 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Close(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Close(f func() (err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Close"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Close() (err error) {
	__impl.m.mu.Lock()

	__key := "Close"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func() error)
			return __f()
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Close()
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func() error)
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f()
}

// Exec 增加一个 Exec 方法的返回值的 mock 数据。
// 如果 Mysql#Exec 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Exec(out0 mysql.Result, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Exec"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(query string, args ...interface{}) (mysql.Result, error) {
		return out0, err
	})
}

// Exec 增加一个 mock 数据的回调函数，在执行 Mysql#Exec 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Exec 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Exec(f func(query string, args ...interface{}) (out0 mysql.Result, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Exec"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Exec 设置 Mysql#Exec 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Exec(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Exec(out0 mysql.Result, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Exec"
	__def.m.defData[__key] = func(query string, args ...interface{}) (mysql.Result, error) {
		return out0, err
	}
}

// Exec 设置 Mysql#Exec 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Exec(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Exec(f func(query string, args ...interface{}) (out0 mysql.Result, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Exec"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Exec(query string, args ...interface{}) (out0 mysql.Result, err error) {
	__impl.m.mu.Lock()

	__key := "Exec"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(query string, args ...interface{}) (mysql.Result, error))
			return __f(query, args...)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Exec(query, args...)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(query string, args ...interface{}) (mysql.Result, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(query, args...)
}

// Ping 增加一个 Ping 方法的返回值的 mock 数据。
// 如果 Mysql#Ping 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Ping(err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Ping"
	__adder.m.data[__key] = append(__adder.m.data[__key], func() error {
		return err
	})
}

// Ping 增加一个 mock 数据的回调函数，在执行 Mysql#Ping 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Ping 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Ping(f func() (err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Ping"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Ping 设置 Mysql#Ping 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Ping(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Ping(err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Ping"
	__def.m.defData[__key] = func() error {
		return err
	}
}

// Ping 设置 Mysql#Ping 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Ping(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Ping(f func() (err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Ping"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Ping() (err error) {
	__impl.m.mu.Lock()

	__key := "Ping"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func() error)
			return __f()
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Ping()
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func() error)
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f()
}

// Prepare 增加一个 Prepare 方法的返回值的 mock 数据。
// 如果 Mysql#Prepare 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Prepare(out0 mysql.Stmt, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Prepare"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(query string) (mysql.Stmt, error) {
		return out0, err
	})
}

// Prepare 增加一个 mock 数据的回调函数，在执行 Mysql#Prepare 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Prepare 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Prepare(f func(query string) (out0 mysql.Stmt, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Prepare"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Prepare 设置 Mysql#Prepare 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Prepare(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Prepare(out0 mysql.Stmt, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Prepare"
	__def.m.defData[__key] = func(query string) (mysql.Stmt, error) {
		return out0, err
	}
}

// Prepare 设置 Mysql#Prepare 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Prepare(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Prepare(f func(query string) (out0 mysql.Stmt, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Prepare"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Prepare(query string) (out0 mysql.Stmt, err error) {
	__impl.m.mu.Lock()

	__key := "Prepare"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(query string) (mysql.Stmt, error))
			return __f(query)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Prepare(query)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(query string) (mysql.Stmt, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(query)
}

// Query 增加一个 Query 方法的返回值的 mock 数据。
// 如果 Mysql#Query 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Query(out0 mysql.Rows, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Query"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(query string, args ...interface{}) (mysql.Rows, error) {
		return out0, err
	})
}

// Query 增加一个 mock 数据的回调函数，在执行 Mysql#Query 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Query 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Query(f func(query string, args ...interface{}) (out0 mysql.Rows, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Query"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Query 设置 Mysql#Query 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Query(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Query(out0 mysql.Rows, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Query"
	__def.m.defData[__key] = func(query string, args ...interface{}) (mysql.Rows, error) {
		return out0, err
	}
}

// Query 设置 Mysql#Query 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Query(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Query(f func(query string, args ...interface{}) (out0 mysql.Rows, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Query"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Query(query string, args ...interface{}) (out0 mysql.Rows, err error) {
	__impl.m.mu.Lock()

	__key := "Query"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(query string, args ...interface{}) (mysql.Rows, error))
			return __f(query, args...)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Query(query, args...)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(query string, args ...interface{}) (mysql.Rows, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(query, args...)
}

// QueryRow 增加一个 QueryRow 方法的返回值的 mock 数据。
// 如果 Mysql#QueryRow 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) QueryRow(out0 mysql.Row, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "QueryRow"
	__adder.m.data[__key] = append(__adder.m.data[__key], func(query string, args ...interface{}) (mysql.Row, error) {
		return out0, err
	})
}

// QueryRow 增加一个 mock 数据的回调函数，在执行 Mysql#QueryRow 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#QueryRow 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) QueryRow(f func(query string, args ...interface{}) (out0 mysql.Row, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "QueryRow"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// QueryRow 设置 Mysql#QueryRow 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().QueryRow(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) QueryRow(out0 mysql.Row, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "QueryRow"
	__def.m.defData[__key] = func(query string, args ...interface{}) (mysql.Row, error) {
		return out0, err
	}
}

// QueryRow 设置 Mysql#QueryRow 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().QueryRow(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) QueryRow(f func(query string, args ...interface{}) (out0 mysql.Row, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "QueryRow"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) QueryRow(query string, args ...interface{}) (out0 mysql.Row, err error) {
	__impl.m.mu.Lock()

	__key := "QueryRow"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func(query string, args ...interface{}) (mysql.Row, error))
			return __f(query, args...)
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.QueryRow(query, args...)
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func(query string, args ...interface{}) (mysql.Row, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f(query, args...)
}

// Stats 增加一个 Stats 方法的返回值的 mock 数据。
// 如果 Mysql#Stats 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (__adder *MockDataAdderMysql) Stats(out0 sql.DBStats, err error) {
	__adder.m.mu.Lock()
	defer __adder.m.mu.Unlock()

	__key := "Stats"
	__adder.m.data[__key] = append(__adder.m.data[__key], func() (sql.DBStats, error) {
		return out0, err
	})
}

// Stats 增加一个 mock 数据的回调函数，在执行 Mysql#Stats 方法时会调用，并用这个回调函数的返回值来作为接口返回值。
// 如果 Mysql#Stats 被调用，这个 mock 数据就会按照 FIFO 顺序被消费掉。
func (adder *MockFuncAdderMysql) Stats(f func() (out0 sql.DBStats, err error)) {
	adder.m.mu.Lock()
	defer adder.m.mu.Unlock()

	key := "Stats"
	adder.m.data[key] = append(adder.m.data[key], f)
}

// Stats 设置 Mysql#Stats 方法的默认 mock 数据，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultFunc().Stats(...) 方法设置的默认回调。
func (__def *MockDefaultDataMysql) Stats(out0 sql.DBStats, err error) {
	__def.m.mu.Lock()
	defer __def.m.mu.Unlock()

	__key := "Stats"
	__def.m.defData[__key] = func() (sql.DBStats, error) {
		return out0, err
	}
}

// Stats 设置 Mysql#Stats 方法的默认回调函数，仅当所有 mock 数据消耗完之后起作用。
// 这个函数会覆盖 m.DefaultData().Stats(...) 方法设置的默认数据。
func (def *MockDefaultFuncMysql) Stats(f func() (out0 sql.DBStats, err error)) {
	def.m.mu.Lock()
	defer def.m.mu.Unlock()

	key := "Stats"
	def.m.defData[key] = f
}

func (__impl *mockImplMysql) Stats() (out0 sql.DBStats, err error) {
	__impl.m.mu.Lock()

	__key := "Stats"
	__data := __impl.m.data[__key]

	if len(__data) == 0 {
		__defData, __ok := __impl.m.defData[__key]
		__impl.m.mu.Unlock()

		if __ok {
			__f := __defData.(func() (sql.DBStats, error))
			return __f()
		}

		if __impl.m.impl != nil {
			return __impl.m.impl.Stats()
		}

		if _, __ok := __impl.m.optionalMethods[__key]; __ok {
			return
		}

		panic(fmt.Sprintf("no mock data nor default implementation. [method:%v]", __key))
	}

	// FIFO 顺序。
	__f := __data[0].(func() (sql.DBStats, error))
	__impl.m.data[__key] = __data[1:]
	__impl.m.mu.Unlock()

	return __f()
}
